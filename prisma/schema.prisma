generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Image {
  id        Int       @id @default(autoincrement())
  url       String
  sizeMb    Float
  color     String?
  productId Int?
  product   Product?
  products  Product[] @relation("secondaryImages")
}

model Product {
  id              Int      @id @default(autoincrement())
  name            String
  description     String?
  primaryImageId  Int      @unique
  imageUrl        String
  price           Float
  priority        Int      @unique @default(autoincrement())
  active          Boolean
  deleted         Boolean
  stock           Int
  categoryName    String
  categoryId      Int
  category        Category @relation(fields: [categoryId], references: [id])
  primaryImage    Image    @relation(fields: [primaryImageId], references: [id])
  orders          Order[]  @relation("Product-Orders")
  secondaryImages Image[]  @relation("secondaryImages")
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  priority Int       @unique @default(autoincrement())
  products Product[]
}

model Customer {
  id      Int     @id @default(autoincrement())
  name    String
  email   String  @unique
  address String
  orders  Order[]
}

model Order {
  id           Int       @id @default(autoincrement())
  customerId   Int
  totalPrice   Float
  orderDate    DateTime  @default(now())
  customer     Customer  @relation(fields: [customerId], references: [id])
  paymentInfo  Payment?
  shippingInfo Shipping?
  products     Product[] @relation("Product-Orders")
}

model Payment {
  id          Int      @id @default(autoincrement())
  paymentType String
  amount      Float
  paymentDate DateTime @default(now())
  orderId     Int      @unique
  order       Order    @relation(fields: [orderId], references: [id])
}

model Shipping {
  id           Int      @id @default(autoincrement())
  address      String
  city         String
  state        String
  zipCode      String
  shippingDate DateTime @default(now())
  orderId      Int      @unique
  order        Order    @relation(fields: [orderId], references: [id])
}
